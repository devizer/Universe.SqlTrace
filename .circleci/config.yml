version: 2

jobs:
  build:
    machine: true
#    docker:
#      - image: mono:6.4
    steps:
      - run: git config --global core.autocrlf false
      - checkout
      - run: bash .circleci/init.sh
      - run: git submodule update --init --recursive
      
      - run: 'sudo apt install p7zip -y;'
      - run: 'echo v9.20; 7zr b || 7z b'
      - run: 'bash .circleci/install-7z.sh'
      - run: 'echo v16.02; 7zr b || 7z b'
      - run: 'cat /proc/cpuinfo'
      - run: 'lscpu || true'
      - run: 'free -m'
      - run: 'cat /etc/os-release'
      
      # before install
      - run: 'bash .circleci/install-mono.sh'
      - run: 'apt-cache policy mono-complete; apt-cache policy nuget; apt-cache policy msbuild;'

      # it is the real build
      - run: nuget restore
      - run: 'pushd include/Universe.SqlServerJam/src; nuget restore; popd'
      - run: msbuild Universe.SqlTrace.sln

      # - run: 'url=https://raw.githubusercontent.com/devizer/glist/master/install-docker-on-debian.sh; (wget -q -nv --no-check-certificate -O - $url 2>/dev/null || curl -sSL $url) | bash'
      - run: 'sudo docker run -t hello-world || true'
      - run: 'docker run -t hello-world || true'
      - run: 'sudo docker version'
      - run: 'docker version'
      - run: 'script=https://raw.githubusercontent.com/devizer/glist/master/install-dotnet-and-nodejs.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash -s dotnet node pwsh'
      - run: 'sudo apt-get install jq pv mysql-client postgresql-client pigz -y -q'
      - run: 'url=https://raw.githubusercontent.com/devizer/glist/master/install-5-mysqls-for-tests-V2.sh; (wget -q -nv --no-check-certificate -O - $url 2>/dev/null || curl -sSL $url) | bash'
      - run: 'url=https://raw.githubusercontent.com/devizer/glist/master/install-7-postres-for-tests.sh; (wget -q -nv --no-check-certificate -O - $url 2>/dev/null || curl -sSL $url) | bash'
      - run: |
            if [[ -n "${HIDE_PULL_PROGRESS:-}" ]]; then hide_pull=">/dev/null"; fi

            function run_sql_server() {
              name="$1"
              image="$2"
              port="$3"
              exists=false; sudo docker logs "$name" >/dev/null 2>&1 && echo The SQL Server $name already exists && exists=true && printf "Startings ... "; sudo docker start $name 2>/dev/null || true
              [[ $exists == false ]] && (echo Creating SQL Server $name container using $image; eval "sudo docker pull $image $hide_pull"; sudo docker run -d --name $name -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=`1qazxsw2' -p $port:1433 $image ) || true
            }
            run_sql_server 'sql-2017-for-tests' 'microsoft/mssql-server-linux:2017-latest' 1434
            # run_sql_server 'sql-2019-for-tests' 'mcr.microsoft.com/mssql/server:2019-CTP3.2-ubuntu' 1435
            run_sql_server 'sql-2019-for-tests' 'mcr.microsoft.com/mssql/server:2019-RC1-ubuntu' 1435

      - run: docker run --link sql-2017-for-tests:sql-2017-for-tests aanand/wait
      - run: docker run --link sql-2019-for-tests:sql-2019-for-tests aanand/wait
      # - run: sleep 13
      - run: sudo docker logs sql-2017-for-tests
      - run: sudo docker logs sql-2019-for-tests


      # - run: '/usr/bin/dockerd -H unix:///var/run/docker.sock || true'
      # /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
      # 
  test:
    docker:
      - image: mono:6.4
    steps:
      - checkout
      - run: 'cat /etc/os-release'

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test
