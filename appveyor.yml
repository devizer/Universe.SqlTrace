version: 'SqlProfiler API Integration Tests #{build}'
image:
- Visual Studio 2019
- Visual Studio 2017
- Visual Studio 2015

environment:

  Project: "SQL Server Profiler API for .NET"

  matrix:

    - JOB: "SQL SERVER LocalDB 2016 SP1 CU8"
      SqlServers: 'LocalDB 2016' # For VS 2015 image it is the LocalDB 2014

     # just to measure Disk IO Benchmark
    - JOB: "SQL SERVER LocalDB 2017"
      SqlServers: 'LocalDB 2017'

    - JOB: "SQL SERVER 2019 RC (Developer)"
      SqlServers: 'SqlServer 2019: DEVELOPER_2019'

    - JOB: "SQL SERVER 2017 (Developer)"
      SqlServers: 'SqlServer 2017 Developer: DEVELOPER_2017'

    - JOB: "SQL SERVER 2017 (Express)"
      SqlServers: 'SqlServer 2017 Express: EXPRESS_2017'

    - JOB: "SQL SERVER 2016 (Express)"
      SqlServers: 'SqlServer 2016 Express: EXPRESS_2016'
    
    - JOB: "SQL SERVER 2014 SP2 x86 (Express)"
      SqlServers: 'SqlServer 2014 Express: EXPRESS_2014'

    - JOB: "SQL SERVER 2012 SP3 (Express)"
      SqlServers: 'SqlServer 2012 Express: EXPRESS_2012'

    - JOB: "SQL SERVER 2008 R2 SP2 x86 (Express)"
      SqlServers: 'SqlServer 2008R2 Express: EXPRESS_2008_R2'

    - JOB: "SQL SERVER 2008 SP3 (Express)"
      SqlServers: 'SqlServer 2008 Express: EXPRESS_2008'

    - JOB: "SQL SERVER 2005 SP4 x86 (Express)"
      SqlServers: 'SqlServer 2005 Express: EXPRESS_2005'

      # it is ease to install multiple SQL Servers
    - JOB: "SQL SERVER 2012 & 2008 R2"
      SqlServers: 'SqlServer 2019: SQL_2019, SqlServer 2012: EXPRESS_2012, SqlServer 2008R2: EXPRESS_2008_R2'
 
# 3 SQL Servers below are not supported on the "Visual Studio 2015" image
matrix:
  exclude:
    - JOB: "SQL SERVER 2019 RC (Developer)"
      image: "Visual Studio 2015"
      
    - JOB: "SQL SERVER LocalDB 2017"
      image: "Visual Studio 2015"

    - JOB: "SQL SERVER 2005 SP4 x86 (Express)"
      image: "Visual Studio 2015"
      
platform: Any CPU
init:
- ps: |

    # copy paste it
    $Work="$($Env:LocalAppData)"; if ($Work -eq "") { $Work="$($Env:UserProfile)"; }; $Work="$Work\Temp\Sql-Installers"
    if (-not (Test-Path $Work)) { New-Item -ItemType Directory -Path $Work -EA SilentlyContinue | out-null }
    Write-Host "Downloading SQL Installer Scripts to: $Work" -ForegroundColor Cyan
    (new-object System.Net.WebClient).DownloadFile('https://raw.githubusercontent.com/devizer/glist/master/bin/SQL-Express/Sql-Setup-Bootstrap.ps1', "$Work\Sql-Setup-Bootstrap.ps1")
    pushd $Work; . .\Sql-Setup-Bootstrap.ps1; popd


install:
- ps: '$Env:ARTIFACT = "$($Env:APPVEYOR_BUILD_FOLDER)\Artifact"; mkdir $Env:ARTIFACT | out-null; Say "ARTIFACT folder: $($Env:ARTIFACT)"'
- ps: '$Env:SQL_SETUP_LOG_FOLDER = $Env:ARTIFACT; Say "SQL_SETUP_LOG_FOLDER is [$($Env:SQL_SETUP_LOG_FOLDER)]"'
- ps: Start-Transcript "Artifact\Detailed-Build.log" -Force
- git submodule update --init --recursive
- ps: |

    # Say "Measuring Disk IO Perf"; pushd appveyor; & cmd /c run-DiskSpd-tests.cmd
    # popd
    # Exit-AppVeyorBuild

- ps: |
    Say "Pre-installed Sql Servers: $((Get-Preinstalled-SqlServers) -Join ", ")"
    Show-SqlServers

    Say "Pre-installed LocalDB Servers"
    Find-Apps LocalDB | ft DisplayName, DisplayVersion, Guid, MsiUninstallArgs

    Say "Disable All pre-installed sql servers"
    Disable-SqlServers (Get-Preinstalled-SqlServers)
    
    Say "Delete All pre-installed sql servers"
    Delete-SqlServers (Get-Preinstalled-SqlServers)
    Show-SqlServers

### THE END OF TEMPLATE ###

cache:
  - '%USERPROFILE%\AppData\Local\temp\build-tools-online.temp -> Prepare-NuGet-and-Build-Tools.ps1'

before_build:
- ps: | 
    # PSReadLine must be upgraded on VS 2019 image
    
    Upgrade-PSReadLine

    # Install new SQL Servers
    $todo = Parse-SqlServers "$($Env:SqlServers)"
    $todo | % { Install-SqlServer $_ }
    $has_Local_DB = $todo | where { $_.Keys -contains "LocalDB" }
    if (!$has_Local_DB) { 
        Say "Pre-installed SqlLocalDB.exe: $(Find-SqlLocalDB-Exe)"
        Hide-LocalDB-Servers
    }

    # Experimental log 
    # if ("$($Env:JOB)" -like "*Developer*") { 
    #    Say "Pack all the logs"
    #     & 7z a a -t7z -mx=3 "$($Env:SQL_SETUP_LOG_FOLDER)\All the logs.7z" -ir!*.log -xr!Artifact
    # }
    #>

    Show-SqlServers


build_script:
- ps: | 
      Say "RESTORE and BUILD"
      & .\build-for-appveyor.cmd

after_build:

test_script:
- ps: |
    $Env:TEST_SQL_NET_DURATION_OF_Ping = 42
    $Env:TEST_SQL_NET_DURATION_OF_Upload = 42
    $Env:TEST_SQL_NET_DURATION_OF_Download = 42
    $assemblies = @(
        "include\Universe.SqlServerJam\src\Universe.SqlServerJam.Tests\bin\Release\Universe.SqlServerJam.Tests.dll",
        "Universe.SqlTrace.Tests\bin\Debug\Universe.SqlTrace.Tests.exe"
    )
    if ($skip_test) { $assemblies = @() }
    foreach($assembly in $assemblies) {
        $file=[System.IO.Path]::GetFileNameWithoutExtension($assembly)
        Say "TEST $file"
        & nunit3-console $assembly --workers=1 "--result=$($file).xml;format=AppVeyor"
    }

- ps: | 
    Say "Prepare Artifacts"
    cmd /c systeminfo >$Env:ARTIFACT\System-Info.log
    get-WmiObject win32_logicaldisk | ft >$Env:ARTIFACT\Logical-Disks.log

    # Find and store logs
    # powershell -f Info\Store-Logs-2.ps1
    
    # Optional logs and files
    if ($false) {

        # it taskes 20 seconds
        Say "Store Event Logs"; pushd $Env:ARTIFACT; & $Env:APPVEYOR_BUILD_FOLDER\appveyor\StoreEventLogs.exe; popd

        Say "Program Files (names)"
        cmd /c dir /b /s /ah /as "c:\program files" *> "$Env:ARTIFACT\Program Files (names).log"

        Say "Program Files (files)"
        Get-ChildItem -Path "C:\Program Files" -recurse -force *> "$Env:ARTIFACT\Program Files (objects).log"

        Say "User Profile (names)"
        cmd /c dir /b /s /ah /as "$Env:USERPROFILE" *> "$Env:ARTIFACT\User Profile (names).log"

        Say "User Profile (files)"
        Get-ChildItem -Path "$Env:USERPROFILE" -recurse -force *> "$Env:ARTIFACT\User Profile (objects).log"

    }

    if ($false -and $Env:Script -eq $null) {
        Say "Logging preinstalled software"
        get-wmiobject win32_product | sort -Property Vendor, Name, Version | ft Version, Name, Vendor, InstallState, IdentifyingNumber *> "$Env:ARTIFACT\Preintalled Software.log"
    }
    
    Say "Pack working folder as the SqlProfiler (AppVeyor Build Folder).7z artifact"
    & "7z" a -t7z -mx=3 -ms=on "SqlProfiler (AppVeyor Build Folder).7z" .
    Say "Bye-bye"

after_test:
- ps: Stop-Transcript;
# - cmd: bash -c 'time echo "Hello from $(bash --version)"'

# Error uploading artifact the storage: The underlying connection was closed: An unexpected error occurred on a send.
artifacts:
 - path: Artifact
 - path: 'SqlProfiler (AppVeyor Build Folder).7z'
