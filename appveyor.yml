version: 'SqlProfiler API Integration Tests #{build}'
image:
# - Visual Studio 2013
# - Visual Studio 2015
- Visual Studio 2017
# - Visual Studio 2019

environment:

  Project: "SQL Server Profiler API for .NET"

  matrix:

    - JOB: "SQL SERVER LocalDB 2016 SP1 CU8"
      Local_DB: True

    - JOB: "SQL SERVER LocalDB 2017"
      Local_DB: True
      Script: 'powershell -f .\Install-SQL-LocalDB.ps1; cp C:\Users\appveyor\AppData\Local\Temp\LocalDB-Installer\SqlLocaLDB-v14-x64.log $Env:ARTIFACT;'

    - JOB: "SQL SERVER 2019 RC (Developer)"
      Script: .\SQL-2019-Pre.cmd

    - JOB: "SQL SERVER 2017 (Developer)"
      Script: 'powershell -f .\sql-dev-2017.ps1'

    - JOB: "SQL SERVER 2017 (Express)"
      Script: .\SQL-Express-2017-Updated.cmd

    - JOB: "SQL SERVER 2016 (Express)"
      Script: .\SQL-Express-2016-Updated.cmd
    
    - JOB: "SQL SERVER 2014 SP2 x86 (Express)"
      Script: .\SQL-Express-2014-SP2-x86.cmd

    - JOB: "SQL SERVER 2012 SP3 (Express)"
      Script: .\SQL-Express-2012-SP3.cmd

    - JOB: "SQL SERVER 2008 R2 SP2 x86 (Express)"
      Script: .\SQL-Express-2008-R2-SP2-x86.cmd

    - JOB: "SQL SERVER 2008 SP3 (Express)"
      Script: .\SQL-Express-2008-SP3-x64.cmd

    - JOB: "SQL SERVER 2005 SP4 x86 (Express)"
      Script: .\SQL-Express-2005-SP4-x86.cmd

platform: Any CPU
init:
- ps: |

    function Say { param( [string] $message )
        Write-Host "$(Get-Elapsed) " -NoNewline -ForegroundColor Yellow
        Write-Host "$message" -ForegroundColor Magenta # Yellow
    }
    
    function Get-Elapsed
    {
        if ($Global:startAt -eq $null) { $Global:startAt = [System.Diagnostics.Stopwatch]::StartNew(); }
        [System.String]::Concat("[", (new-object System.DateTime(0)).AddMilliseconds($Global:startAt.ElapsedMilliseconds).ToString("HH:mm:ss"), "]");
    }; $_=Get-Elapsed;

    function Get-Preinstalled-SqlServers
    {
        $names = @();
        foreach($path in @('HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server', 'HKLM:\SOFTWARE\WOW6432Node\Microsoft\Microsoft SQL Server')) {
            try { $v = (get-itemproperty $path).InstalledInstances; $names += $v } catch {}
        }
        $names | sort | where { "$_".Length -gt 0 }
    }

    function Disable-SqlServers { param( [array] $names ) 
        foreach($sqlname in $names) {
            Say "Disable MSSQL`$$sqlname"
            Stop-Service "MSSQL`$$sqlname" -ErrorAction SilentlyContinue
            Set-Service "MSSQL`$$sqlname" -StartupType Disabled
        }
    }

    function Delete-SqlServers { param( [array] $names ) 
        foreach($sqlname in $names) {
            Say "Delete MSSQL`$$sqlname"
            Stop-Service "MSSQL`$$sqlname" -ErrorAction SilentlyContinue
            Set-Service "MSSQL`$$sqlname" -StartupType Disabled
            & cmd /c sc delete "MSSQL`$$sqlname"
        }
    }

    function Hide-LocalDB-Servers {
        Say "Hide SQL Server LocalDB"; 
        Remove-Item -Path "HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server Local DB\Installed Versions" -Recurse -Force
    }

    # return empty string if SqlLocalDB.exe is not found. always returns latest installed SqlLocalDB.exe
    function Find-SqlLocalDB-Exe {
        if ($Global:LocalDbExe -eq $null) {
            $Global:LocalDbExe=(Get-ChildItem -Path "C:\Program Files\Microsoft SQL Server" -Filter "SqlLocalDB.exe" -Recurse -ErrorAction SilentlyContinue -Force | Sort-Object -Property "FullName" -Descending)[0].FullName
            if ($Global:LocalDbExe) { Write-Host "$(Get-Elapsed) Found SqlLocalDB.exe full path: [$($Global:LocalDbExe)]" } else { Write-Host "$(Get-Elapsed) SqlLocalDB.exe NOT Found" }
        }
        "$($Global:LocalDbExe)"
    }

    function Show-SqlServers {
        get-wmiobject win32_service | where {$_.Name.ToLower().IndexOf("sql") -ge 0 } | sort-object -Property "DisplayName" | ft State, Name, DisplayName, StartMode
    }

- cmd: bash -c 'time echo "Hello from BASH $(bash --version)"'

install:
- ps: $Env:ARTIFACT = "$($Env:APPVEYOR_BUILD_FOLDER)\Artifact"; mkdir $Env:ARTIFACT | out-null;
- ps: Start-Transcript "Artifact\Detailed-Build.log" -Force
- git submodule update --init --recursive
- ps: |

    Say "Pre Installed Sql Servers: $((Get-Preinstalled-SqlServers) -Join ", ")"
    Show-SqlServers

    Say "Disable All pre-installed sql servers"
    Disable-SqlServers (Get-Preinstalled-SqlServers)
    
    Say "Delete All pre-installed sql servers"
    Delete-SqlServers (Get-Preinstalled-SqlServers)
    Show-SqlServers

- ps: | 
        # Install new SQL Servers
        Say "ARTIFACT folder: $($Env:ARTIFACT)"
        pushd SQL-Express; 

        "$Env:Script" > "$Env:ARTIFACT\$Env:JOB (script).txt"

        # Script for LocalDB 2019 is empty - it is already preinstalled
        if ($Env:Script) {
            Say "Installing $Env:JOB"
            Invoke-Expression $Env:Script *> "$Env:ARTIFACT\Sql Server Setup.log"
            Say "Finished SQL Server Installers"
        } 
        
        # hide pre-installed LocalDB for tests with SQL Express/Developer
        if ($Env:Local_DB -eq $null) {
            Say "Pre-installed SqlLocalDB.exe: $(Find-SqlLocalDB-Exe)"
            Hide-LocalDB-Servers
        }
        popd
        get-wmiobject win32_service | where {$_.Name.ToLower().IndexOf("sql") -ge 0 } | sort-object -Property "DisplayName" | ft Name, DisplayName, StartMode, State

### THE END OF TEMPLATE ###

cache:
  - '%USERPROFILE%\AppData\Local\temp\build-tools-online.temp -> Prepare-NuGet-and-Build-Tools.ps1'


build_script:
- ps: | 
      & .\build-for-appveyor.cmd

test_script:
# already tested?
- ps: |
    $Env:TEST_SQL_NET_DURATION_OF_Ping = 42
    $Env:TEST_SQL_NET_DURATION_OF_Upload = 42
    $Env:TEST_SQL_NET_DURATION_OF_Download = 42
    $assemblies = @(
        "include\Universe.SqlServerJam\src\Universe.SqlServerJam.Tests\bin\Release\Universe.SqlServerJam.Tests.dll",
        "Universe.SqlTrace.Tests\bin\Debug\Universe.SqlTrace.Tests.exe"
    )
    foreach($assembly in $assemblies) {
        & nunit3-console $assembly --workers=1 "--result=$([System.IO.Path]::GetFileNameWithoutExtension($assembly)).xml;format=AppVeyor"
    }

- ps: | 
    cmd /c systeminfo >$Env:ARTIFACT\System-Info.log
    get-WmiObject win32_logicaldisk | ft >$Env:ARTIFACT\Logical-Disks.log

    if ($false) {
    Say "Program Files (names)"
    cmd /c dir /b /s /ah /as "c:\program files" *> "$Env:ARTIFACT\Program Files (names).log"

    Say "Program Files (files)"
    Get-ChildItem -Path "C:\Program Files" -recurse -force *> "$Env:ARTIFACT\Program Files (objects).log"

    Say "User Profile (names)"
    cmd /c dir /b /s /ah /as "$Env:USERPROFILE" *> "$Env:ARTIFACT\User Profile (names).log"

    Say "User Profile (files)"
    Get-ChildItem -Path "$Env:USERPROFILE" -recurse -force *> "$Env:ARTIFACT\User Profile (objects).log"
    }

    if ($Env:Script -eq $null) {
        Say "Logging preinstalled software"
        get-wmiobject win32_product | sort -Property Vendor, Name, Version | ft Version, Name, Vendor, InstallState, IdentifyingNumber *> "$Env:ARTIFACT\Preintalled Software.log"
    }
    
    Say "Pack working folder"
    & "7z" a -t7z -mx=3 -ms=on "SqlProfiler (AppVeyor Build Folder).7z" .
    "$(Get-Elapsed) Bye-bye"

after_test:
- ps: Stop-Transcript;

# Error uploading artifact the storage: The underlying connection was closed: An unexpected error occurred on a send.
artifacts:
 - path: Artifact

 - path: 'SqlProfiler (AppVeyor Build Folder).7z'
