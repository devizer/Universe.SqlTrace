version: 'SqlProfiler Integration Tests #{build}'
image:
- Visual Studio 2017
# - Visual Studio 2019

cache:
  - 'C:\Users\appveyor\AppData\Local\temp\build-tools-online.temp'

environment:

  TheLib: "SQL Server Profiler API for .NET and Core"

  matrix:

    - JOB: "SQL SERVER LocalDB 2016"

    - JOB: "SQL SERVER 2005 SP4 x86 (Express)"
      Script: .\SQL-Express-2005-SP4-x86.cmd

    - JOB: "SQL SERVER 2016 (Express)"
      Script: .\SQL-Express-2016-Updated.cmd
    
    - JOB: "SQL SERVER 2019 RC (Developer)"
      Script: .\SQL-2019-Pre.cmd

    - JOB: "SQL SERVER 2017 (Developer)"
      Script: .\sql-dev-2017.ps1

    - JOB: "SQL SERVER 2017 (Express)"
      Script: .\SQL-Express-2017-Updated.cmd

    - JOB: "SQL SERVER 2014 SP2 x86 (Express)"
      Script: .\SQL-Express-2014-SP2-x86.cmd

    - JOB: "SQL SERVER 2012 SP3 (Express)"
      Script: .\SQL-Express-2012-SP3.cmd

    - JOB: "SQL SERVER 2008 R2 SP2 x86 (Express)"
      Script: .\SQL-Express-2008-R2-SP2-x86.cmd

    - JOB: "SQL SERVER 2008 SP3 (Express)"
      Script: .\SQL-Express-2008-SP3-x64.cmd


platform: Any CPU
init:
- cmd: bash -c 'time echo "Hello from BASH $(bash --version)"'
- ps: |
     function Get-Elapsed
     {
         if ($Global:startAt -eq $null) { $Global:startAt = [System.Diagnostics.Stopwatch]::StartNew(); }
         [System.String]::Concat("[", (new-object System.DateTime(0)).AddMilliseconds($Global:startAt.ElapsedMilliseconds).ToString("HH:mm:ss"), "]");
     }; $_=Get-Elapsed;

- ps: |
    if ($false) {
      "$(Get-Elapsed) Configure local Routing"
      Set-Service RemoteAccess -StartupType Manual
      Start-Service RemoteAccess
      "$(Get-Elapsed) Configure Net TCP Port Sharing"
      Set-Service NetTcpPortSharing -StartupType Manual
      Start-Service NetTcpPortSharing
    }
- ps: | 
        netsh advfirewall firewall add rule name="All ICMP V4" protocol=icmpv4:any,any dir=in action=allow
        netsh advfirewall firewall add rule name="Open Port 1433 (SQL Servers)" dir=in action=allow protocol=TCP localport=1433


before_build:
- ps: $Env:ARTIFACT = "$($Env:APPVEYOR_BUILD_FOLDER)\Artifact"; mkdir $Env:ARTIFACT | out-null;
- ps: Start-Transcript "Artifact\Detailed-Build.log" -Force
- git submodule update --init --recursive
- ps: |
    # disable preinstalled SQL Servers
    $names = @();
    foreach($path in @('HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server', 'HKLM:\SOFTWARE\WOW6432Node\Microsoft\Microsoft SQL Server')) {
        try { $v = (get-itemproperty $path).InstalledInstances; $names += $v } catch {}
    }

    [System.Array]::Sort($names);
    $info=""; foreach($name in $names) { $info += " [$name]"; } Write-Host "Sql Servers: $info";
    foreach($sqlname in $names) {
        if ($sqlname.Length -eq 0) { continue; }
        "$(Get-Elapsed) Disable MSSQL`$$sqlname"
        Set-Service "MSSQL`$$sqlname" -StartupType Disabled
        & cmd /c sc delete "MSSQL`$$sqlname"
    }
    get-wmiobject win32_service | where {$_.Name.ToLower().IndexOf("sql") -ge 0 } | sort-object -Property "DisplayName" | ft Name, DisplayName, StartMode, State

- ps: | 
        # Install new SQL Servers
        "ARTIFACT folder: $($Env:ARTIFACT)"
        pushd SQL-Express; 

        "$Env:Script" > "$Env:ARTIFACT\$Env:JOB.txt"
        if ($Env:Script) {
            "$(Get-Elapsed) Installing $Env:JOB"
            & $Env:Script *> "$Env:ARTIFACT\Sql Server Setup.log"
            "$(Get-Elapsed) Finished SQL Server Installers. Deleting LocalDB"
            $localdb=(Get-ChildItem -Path "C:\Program Files\Microsoft SQL Server" -Filter "SqlLocalDB.exe" -Recurse -ErrorAction SilentlyContinue -Force | Sort-Object -Property "FullName" -Descending)[0].FullName
            if ($localdb) {
                "$(Get-Elapsed) LocalDB Manager: [$localdb]"; 
                Remove-Item -Path "HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server Local DB\Installed Versions" -Recurse -Force
                # & $localdb info;  
                # & $localdb delete MSSQLLocalDB
                # "$(Get-Elapsed) Deleted MSSQLLocalDB"
                # & $localdb info;  
            }
        } else {
        }

        popd
        get-wmiobject win32_service | where {$_.Name.ToLower().IndexOf("sql") -ge 0 } | sort-object -Property "DisplayName" | ft Name, DisplayName, StartMode, State

build_script:
- ps: | 
      # & .\build-and-test.cmd
      & .\build-for-appveyor.cmd

test_script:
# already tested?
- nunit3-console Universe.SqlTrace.Tests\bin\Debug\Universe.SqlTrace.Tests.exe --workers=1 --result=myresults.xml;format=AppVeyor
- cmd: |
    set TEST_SQL_NET_DURATION_OF_Ping=42
    set TEST_SQL_NET_DURATION_OF_Upload=42
    set TEST_SQL_NET_DURATION_OF_Download=42
    nunit3-console include\Universe.SqlServerJam\src\Universe.SqlServerJam.Tests\bin\Release\Universe.SqlServerJam.Tests.dll --workers=1 --result=myresults.xml;format=AppVeyor

- ps: cmd /c systeminfo >$Env:ARTIFACT\System-Info.log
- ps: get-WmiObject win32_logicaldisk | ft >$Env:ARTIFACT\Logical-Disks.log
#- cmd: '"%7zip%" a -t7z -mx=9 -ms=on "SqlProfiler (AppVeyor Build Folder).7z" .'

after_test:
- ps: Stop-Transcript

artifacts:
  - path: Artifact

#  - path: 'SqlProfiler (AppVeyor Build Folder).7z'
