version: '1.0.{build}'
image:
- Visual Studio 2017
- Visual Studio 2019

platform: Any CPU
environment:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
init:
- cmd: bash -c 'time echo "Hello from BASH $(bash --version)"'
- ps: |
    Set-Service RemoteAccess -StartupType Manual
    Start-Service RemoteAccess
    Set-Service NetTcpPortSharing -StartupType Manual
    Start-Service NetTcpPortSharing
- ps: | 
        netsh advfirewall firewall add rule name="All ICMP V4" protocol=icmpv4:any,any dir=in action=allow
        netsh advfirewall firewall add rule name="Open Port 1433 (SQL Servers)" dir=in action=allow protocol=TCP localport=1433


before_build:
- ps: $Env:ARTIFACT = "$($Env:APPVEYOR_BUILD_FOLDER)\Artifact"; New-Item -ItemType Directory -Path $Env:ARTIFACT; "Hi" >Artifact\hi.txt
- ps: |
    # disable preinstalled SQL Servers
    $names = @();
    foreach($path in @('HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server', 'HKLM:\SOFTWARE\WOW6432Node\Microsoft\Microsoft SQL Server')) {
        try { $v = (get-itemproperty $path).InstalledInstances; $names += $v } catch {}
    }

    [System.Array]::Sort($names);
    $info=""; foreach($name in $names) { $info += " [$name]"; } Write-Host "Sql Servers: $info";
    foreach($sqlname in $names) {
        if ($sqlname.Length -eq 0) { continue; }
        "Disable MSSQL`$$sqlname"
        Set-Service "MSSQL`$$sqlname" -StartupType Disabled
    }
    get-wmiobject win32_service | where {$_.Name.ToLower().IndexOf("sql") -ge 0 } | sort-object -Property "DisplayName" | ft Name, DisplayName, StartMode, State
    cmd /c dir /b /s

- ps: | 
        # Install new SQL Servers
        "ARTIFACT folder: $($Env:ARTIFACT)"
        pushd SQL-Express; 
        & .\SQL-Express-2017-Updated.cmd     2>&1 >$Env:ARTIFACT\SQL-Express-2017-Updated.log
        & .\SQL-Express-2014-SP2-x86.cmd     2>&1 >$Env:ARTIFACT\SQL-Express-2014-SP2-x86.log
        & .\SQL-Express-2012-SP3.cmd         2>&1 >$Env:ARTIFACT\SQL-Express-2012-SP3.log
        & .\SQL-Express-2008-R2-SP2-x86.cmd  2>&1 >$Env:ARTIFACT\SQL-Express-2008-R2-SP2-x86.log
        popd

        get-wmiobject win32_service | where {$_.Name.ToLower().IndexOf("sql") -ge 0 } | sort-object -Property "DisplayName" | ft Name, DisplayName, StartMode, State

build_script:
- ps: | 
      # check connectivity and test Sql Profiler Wrapper against local SQL Servers
      & .\build-and-test.cmd

artifacts:
  - path: Artifact
